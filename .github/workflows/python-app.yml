# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: test package

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

jobs:
  build:

    runs-on: ubuntu-latest
    
    strategy:
      matrix:
       py_version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.py_version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.py_version }}
    - name: Install dependencies
      run: |
        pip install --upgrade setuptools pip
        pip install --upgrade .
        pip install git+https://github.com/pckroon/pysmiles.git
        pip install -r requirements-tests.txt
        
    - name: Run pytest with codecoverage
      run:  pytest --cov cgsmiles --cov-report=xml
#    - name: Upload coverage codecov   
#      uses: codecov/codecov-action@v3 
#      with:
#            token: ${{ secrets.CODECOV_TOKEN }}
#            files: ./coverage.xml
#            fail_ci_if_error: true
#            verbose: true
            
  lint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        pip install --upgrade setuptools pip
        pip install --upgrade .
        pip install -r requirements-tests.txt
    - name: Run pylint 
      run: |
         pylint --disable=fixme --fail-under=8.0 cgsmiles

  deploy:
    needs: [ lint, build ]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@master
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
        
    - name: Install pypa/build
      run: >-
        python -m
        pip install
        build
        --user
         
    - name: Install twine
      run: >-
        python -m
        pip install
        twine
        --user
         
    - name: Build a binary wheel and a source tarball
      run: >-
        python -m
        build
        --sdist
        --wheel
        --outdir dist/

    - name: Publish to PyPI or Test PyPI
      env:
          TWINE_USERNAME: __token__  # PyPI uses "__token__" as the username for API tokens
          TWINE_PASSWORD: ${{ secrets.PYPI_TEST_API_TOKEN }}  # Store your API token in GitHub Secrets
      run: |
          twine upload --repository-url https://test.pypi.org/legacy/ dist/* 
